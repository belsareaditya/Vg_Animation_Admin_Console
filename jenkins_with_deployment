pipeline {
  agent any

  tools {
    jdk 'jdk17'      // Ensure this tool exists in Global Tool Configuration
    nodejs 'node23'  // Ensure this tool exists in Global Tool Configuration
  }

  environment {
    DOCKERHUB_USER = 'belsareaditya'
    IMAGE_NAME     = 'vault_guard'
    IMAGE_TAG      = "${DOCKERHUB_USER}/${IMAGE_NAME}:${env.BUILD_NUMBER}"

    // Deploy configs
    CONTAINER_NAME = 'vault_guard'
    APP_PORT       = '5173'   // host port (public)
    CONTAINER_PORT = '4173'   // container port

    EMAIL_TO       = 'belsareadityadevops@gmail.com'
    EMAIL_FROM     = 'belsareadityadevops@gmail.com'
  }

  stages {
    stage('Source Code Checkout') {
      steps {
        cleanWs()
        git branch: 'main', url: 'https://github.com/belsareaditya/Vg_Animation.git'
      }
    }

    stage('Dependency Vulnerability Scan (OWASP)') {
      steps {
        dependencyCheck additionalArguments: '''
          --scan .
          --format XML
          --format HTML
          --out .
          --disableYarnAudit
          --disableNodeAudit
        ''',
        odcInstallation: 'dp-check'

        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
      }
    }

    stage('Filesystem Vulnerability Scan (Trivy)') {
      steps {
        sh '''
          echo "üîé Running Trivy filesystem scan..."
          trivy fs . -f table -o trivy-fs.txt || true
          trivy fs . -f json  -o trivy-fs.json || true
        '''
      }
    }

    stage('Build Application Docker Image') {
      steps {
        sh '''
          echo "üî® Building Docker image..."
          docker rmi -f ${IMAGE_NAME} ${IMAGE_TAG} || true
          docker build -t ${IMAGE_NAME} .
        '''
      }
    }

    stage('Container Image Vulnerability Scan (Trivy)') {
      steps {
        sh '''
          echo "üß™ Running Trivy image scan..."
          trivy image ${IMAGE_NAME} -f table -o trivy-image.txt || true
          trivy image ${IMAGE_NAME} -f json  -o trivy-image.json || true
        '''
      }
    }

    stage('Push Docker Image to Registry') {
      steps {
        withCredentials([string(credentialsId: 'docker-cred', variable: 'dockerpwd')]) {
          sh '''
            echo "${dockerpwd}" | docker login -u ${DOCKERHUB_USER} --password-stdin
            docker tag ${IMAGE_NAME} ${IMAGE_TAG}
            docker push ${IMAGE_TAG}
            docker tag ${IMAGE_NAME} ${DOCKERHUB_USER}/${IMAGE_NAME}:latest
            docker push ${DOCKERHUB_USER}/${IMAGE_NAME}:latest
          '''
        }
      }
    }

    stage('Deploy Application Container') {
      steps {
        withCredentials([string(credentialsId: 'docker-cred', variable: 'dockerpwd')]) {
          sh '''
            set -e
            echo "üöÄ Deploying ${IMAGE_TAG} as container ${CONTAINER_NAME} on ${APP_PORT}->${CONTAINER_PORT}..."

            echo "${dockerpwd}" | docker login -u ${DOCKERHUB_USER} --password-stdin

            docker pull ${IMAGE_TAG}

            # Stop & remove any existing container with the same name
            if [ "$(docker ps -aq -f name=^/${CONTAINER_NAME}$)" ]; then
              echo "Stopping and removing existing container ${CONTAINER_NAME}..."
              docker stop ${CONTAINER_NAME} || true
              docker rm ${CONTAINER_NAME} || true
            fi

            docker image prune -f || true

            docker run -d \
              --name ${CONTAINER_NAME} \
              -p ${APP_PORT}:${CONTAINER_PORT} \
              --restart unless-stopped \
              ${IMAGE_TAG}

            echo "‚úÖ ${CONTAINER_NAME} running: host ${APP_PORT} -> container ${CONTAINER_PORT}"
            echo "   Try: curl -I http://localhost:${APP_PORT}"
          '''
        }
      }
    }
  }

  post {
    success { echo "‚úÖ Pipeline completed successfully." }
    failure { echo "‚ùå Pipeline failed - check logs." }

    always {
      script {
        // --- Archive trivy & dependency-check artifacts (non-fatal) ---
        try {
          archiveArtifacts allowEmptyArchive: true,
                           artifacts: 'trivy-*.txt,trivy-*.json,dependency-check-report.*',
                           fingerprint: true
          echo "Artifacts archived."
        } catch (err) {
          echo "ArchiveArtifacts failed or nothing to archive: ${err}"
        }

        // --- Collect diagnostics (docker/container info & logs) ---
        try {
          sh '''
            set +e
            mkdir -p "${WORKSPACE}/pipeline-diagnostics"
            docker version > "${WORKSPACE}/pipeline-diagnostics/docker-version.txt" 2>&1 || true
            docker images --format "table {{.Repository}}:{{.Tag}}\\t{{.ID}}\\t{{.Size}}" > "${WORKSPACE}/pipeline-diagnostics/docker-images.txt" 2>&1 || true
            if docker ps -a --format '{{.Names}}' | grep -q '^${CONTAINER_NAME}$'; then
              docker ps -a --filter "name=^/${CONTAINER_NAME}$" --format "table {{.ID}}\\t{{.Image}}\\t{{.Status}}\\t{{.Ports}}" > "${WORKSPACE}/pipeline-diagnostics/${CONTAINER_NAME}-status.txt" 2>&1 || true
              docker logs --tail 200 ${CONTAINER_NAME} > "${WORKSPACE}/pipeline-diagnostics/${CONTAINER_NAME}-logs.txt" 2>&1 || true
            else
              echo "Container ${CONTAINER_NAME} not present" > "${WORKSPACE}/pipeline-diagnostics/${CONTAINER_NAME}-status.txt" 2>&1 || true
            fi
          '''
          archiveArtifacts allowEmptyArchive: true, artifacts: 'pipeline-diagnostics/**', fingerprint: true
          echo "Diagnostics archived."
        } catch (err) {
          echo "Diagnostics collection skipped: ${err}"
        }

        // --- Compose email values with safe defaults ---
        def status = currentBuild.currentResult ?: 'UNKNOWN'
        def jobName = env.JOB_NAME ?: 'job'
        def buildNo = env.BUILD_NUMBER ?: '0'
        def buildUrl = env.BUILD_URL ?: '#'
        def img = env.IMAGE_TAG ?: "${DOCKERHUB_USER}/${IMAGE_NAME}:${env.BUILD_NUMBER}"
        def container = env.CONTAINER_NAME ?: '(none)'
        def appPort = env.APP_PORT ?: '5173'
        def containerPort = env.CONTAINER_PORT ?: '4173'
        def action = (params.ACTION ?: env.ACTION) ?: '(none)'

        // Colors & emoji
        def badgeColor = '#28a745'
        def badgeEmoji = '‚úÖ'
        if (status == 'SUCCESS') { badgeColor = '#28a745'; badgeEmoji = '‚úÖ' }
        if (status == 'FAILURE') { badgeColor = '#d73a49'; badgeEmoji = '‚ùå' }
        if (status == 'UNSTABLE') { badgeColor = '#ff9f43'; badgeEmoji = '‚ö†Ô∏è' }
        if (status == 'ABORTED') { badgeColor = '#6c757d'; badgeEmoji = '‚èπ' }

        // --- Email body with centered short badge above title ---
        def emailBody = """
<!doctype html>
<html>
  <head><meta charset="utf-8" /></head>
  <body style="margin:0; font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial; background:#f4f7fa; padding:28px;">
    <div style="max-width:760px; margin:0 auto;">
      <div style="background:#ffffff; border-radius:14px; box-shadow:0 14px 40px rgba(20,30,40,0.08); overflow:hidden; padding:30px; text-align:center;">

        <!-- Centered pill badge -->
        <div style="margin-bottom:16px;">
          <span style="background:${badgeColor}; color:#fff; padding:10px 28px; border-radius:999px; font-weight:800; font-size:14px; display:inline-block;">
            ${badgeEmoji} ${status}
          </span>
        </div>

        <!-- Title -->
        <h2 style="margin:0; font-size:20px; color:#0b1220;">Vault Guard Report</h2>
        <div style="color:#6b7a82; font-size:13px; margin-top:6px; margin-bottom:18px;">
          ${jobName} ‚Äî Build <strong>#${buildNo}</strong> ‚Ä¢ Action: ${action}
        </div>

        <!-- Info block (centered width) -->
        <div style="text-align:left; margin:0 auto; max-width:560px;">
          <div style="margin-bottom:10px;"><span style="font-weight:600; color:#30414a;">Image:</span> <span style="font-family:monospace; background:#f6f8fa; padding:4px 8px; border-radius:6px;">${img}</span></div>
          <div style="margin-bottom:10px;"><span style="font-weight:600; color:#30414a;">Container:</span> <span style="font-family:monospace; background:#f6f8fa; padding:4px 8px; border-radius:6px;">${container}</span></div>
          <div style="margin-bottom:14px;"><span style="font-weight:600; color:#30414a;">Port Mapping:</span> ${appPort} ‚Üí ${containerPort}</div>

          <div style="margin-top:6px; margin-bottom:6px;">
            <strong>Security Scans:</strong>
            <div style="display:inline-block; margin-left:8px; background:#fff3cd; color:#7a4a00; padding:6px 10px; border-radius:8px; font-size:13px;">
              Trivy (fs & image) ‚Ä¢ OWASP Dependency-Check
            </div>
          </div>
        </div>

        <!-- CTA buttons -->
        <div style="margin-top:20px;">
          <a href="${buildUrl}" style="text-decoration:none; display:inline-block; padding:10px 16px; background:#0b74ff; color:#fff; border-radius:8px; font-weight:700; margin:6px;">üîó View Build</a>
          <a href="${buildUrl}artifact" style="text-decoration:none; display:inline-block; padding:10px 16px; background:#6f42c1; color:#fff; border-radius:8px; font-weight:700; margin:6px;">üì¶ Artifacts</a>
          <a href="${buildUrl}console" style="text-decoration:none; display:inline-block; padding:10px 16px; background:#24292f; color:#fff; border-radius:8px; font-weight:700; margin:6px;">üìù Console Log</a>
        </div>

        <div style="margin-top:18px; color:#6b7a82; font-size:13px;">
          Artifacts archived: <strong>trivy-*.txt</strong>, <strong>trivy-*.json</strong>, <strong>dependency-check-report.*</strong>.<br/>
          Diagnostics (container logs & docker info) in <code>pipeline-diagnostics/</code>.
        </div>

        <div style="margin-top:20px; border-top:1px solid #eef2f5; padding-top:14px; font-size:12px; color:#93a2ab;">
          Sent by Jenkins ‚Ä¢ ${new Date().format("yyyy-MM-dd HH:mm:ss")}
        </div>
      </div>
    </div>
  </body>
</html>
"""

        // --- Send email (wrap to avoid failing post) ---
        try {
          emailext(
            to: "${EMAIL_TO}",
            from: "${EMAIL_FROM}",
            subject: "${badgeEmoji} ${status} ‚Äî ${jobName} #${buildNo}",
            mimeType: 'text/html',
            body: emailBody,
            attachmentsPattern: '',
            attachLog: false,
            compressLog: false
          )
          echo "Notification email sent to ${EMAIL_TO}"
        } catch (mailErr) {
          echo "Failed to send email notification: ${mailErr}"
        }

        // final cleanup (non-fatal)
        try {
          cleanWs()
        } catch (err) {
          echo "Skipping cleanWs(): ${err}"
        }
      }
    }
  }
}
