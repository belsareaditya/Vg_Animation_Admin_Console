pipeline {
  agent any

  tools {
    jdk 'jdk17'      // Ensure this tool exists in Global Tool Configuration
    nodejs 'node23'  // Ensure this tool exists in Global Tool Configuration
  }

  environment {
    DOCKERHUB_USER = 'belsareaditya'
    IMAGE_NAME     = 'vault_guard'
    IMAGE_TAG      = "${DOCKERHUB_USER}/${IMAGE_NAME}:${env.BUILD_NUMBER}"

    // Deploy configs
    CONTAINER_NAME = 'vault_guard'   // container name
    APP_PORT       = '5173'          // host port (public)
    CONTAINER_PORT = '4173'          // **container** port (Vite preview default earlier)

    EMAIL_TO       = 'belsareadityadevops@gmail.com'
    EMAIL_FROM     = 'belsareadityadevops@gmail.com'   // must match your SMTP-authenticated account
  }

  stages {
    stage('Checkout') {
      steps {
        cleanWs()
        git branch: 'main', url: 'https://github.com/belsareaditya/Vg_Animation.git'
      }
    }

    stage('OWASP Dependency Check') {
      steps {
        dependencyCheck additionalArguments: '''
          --scan .
          --format XML
          --format HTML
          --out .
          --disableYarnAudit
          --disableNodeAudit
        ''',
        odcInstallation: 'dp-check'

        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
      }
    }

    stage('Trivy Filesystem Scan') {
      steps {
        sh '''
          echo "ðŸ”Ž Trivy FS scan..."
          trivy fs . -f table -o trivy-fs.txt || true
          trivy fs . -f json  -o trivy-fs.json || true
        '''
      }
    }

    stage('Build Docker Image') {
      steps {
        sh '''
          echo "ðŸ”¨ Building Docker image..."
          docker rmi -f ${IMAGE_NAME} ${IMAGE_TAG} || true
          docker build -t ${IMAGE_NAME} .
        '''
      }
    }

    stage('Trivy Image Scan') {
      steps {
        sh '''
          echo "ðŸ§ª Trivy Image scan..."
          trivy image ${IMAGE_NAME} -f table -o trivy-image.txt || true
          trivy image ${IMAGE_NAME} -f json  -o trivy-image.json || true
        '''
      }
    }

    stage('Push Docker Image') {
      steps {
        withCredentials([string(credentialsId: 'docker-cred', variable: 'dockerpwd')]) {
          sh '''
            echo "${dockerpwd}" | docker login -u ${DOCKERHUB_USER} --password-stdin
            docker tag ${IMAGE_NAME} ${IMAGE_TAG}
            docker push ${IMAGE_TAG}
            docker tag ${IMAGE_NAME} ${DOCKERHUB_USER}/${IMAGE_NAME}:latest
            docker push ${DOCKERHUB_USER}/${IMAGE_NAME}:latest
          '''
        }
      }
    }

    stage('Deploy (Run Container)') {
      steps {
        withCredentials([string(credentialsId: 'docker-cred', variable: 'dockerpwd')]) {
          sh '''
            set -e
            echo "ðŸš€ Deploying ${IMAGE_TAG} as container ${CONTAINER_NAME} on ${APP_PORT}->${CONTAINER_PORT}..."

            # Login (needed for private repos)
            echo "${dockerpwd}" | docker login -u ${DOCKERHUB_USER} --password-stdin

            docker pull ${IMAGE_TAG}

            # Stop & remove any existing container with the same name
            if [ "$(docker ps -aq -f name=^/${CONTAINER_NAME}$)" ]; then
              echo "Stopping and removing existing container ${CONTAINER_NAME}..."
              docker stop ${CONTAINER_NAME} || true
              docker rm ${CONTAINER_NAME} || true
            fi

            docker image prune -f || true

            # Run detached, mapping host 5173 â†’ container 4173
            docker run -d \
              --name ${CONTAINER_NAME} \
              -p ${APP_PORT}:${CONTAINER_PORT} \
              --restart unless-stopped \
              ${IMAGE_TAG}

            echo "âœ… ${CONTAINER_NAME} running: host ${APP_PORT} -> container ${CONTAINER_PORT}"
            echo "   Try: curl -I http://localhost:${APP_PORT}"
          '''
        }
      }
    }
  }

  post {
    always {
      script {
        archiveArtifacts allowEmptyArchive: true, artifacts: 'trivy-*.txt,trivy-*.json,dependency-check-report.*'

        def status = currentBuild.currentResult
        emailext(
          to: "${EMAIL_TO}",
          from: "${EMAIL_FROM}",
          subject: "Jenkins ${status}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
          mimeType: 'text/html',
          body: """
            <p><b>${env.JOB_NAME}</b> #<b>${env.BUILD_NUMBER}</b> finished with: <b>${status}</b></p>
            <ul>
              <li>Image: <code>${IMAGE_TAG}</code></li>
              <li>Container: <code>${CONTAINER_NAME}</code> mapped <b>${APP_PORT}:${CONTAINER_PORT}</b></li>
              <li>Build: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></li>
              <li>Artifacts: <a href="${env.BUILD_URL}artifact">download</a></li>
              <li>Console: <a href="${env.BUILD_URL}console">view</a></li>
            </ul>
          """,
          attachmentsPattern: '',
          attachLog: false,
          compressLog: false
        )
      }
    }
  }
}
